###############################################################################
# AlarmDecoder IoT configuration file - ad2iot.ini
#
#                    requires AD2IoT firmware v1.1.0 or later.
#
#  Place this file in the root folder of the uSD card formatted with a fat32
# partition and restart the device to load the config. If the file is not found
# or the file can not be loaded the firmware will revert back to internal
# configuration storage. Use the ftpd component to upload changes and restart
# the device remotely from trusted systems.
#
###############################################################################

###############################################################################
#- Manage AlarmDecoder protocol source.
#  - ```ad2source [{mode} {arg}]```
#    - {mode}
#      - [S]ocket: Use ser2sock server over tcp for AD2* messages.
#      - [C]om port: Use local UART for AD2* messages.
#    - {arg}
#      - [S]ocket arg: {HOST:PORT}
#      - [C]om arg: {TXPIN:RXPIN}.
#  - Examples:
#    - Show current mode.
#      - ```ad2source```
#    - Set source to ser2sock client at address and port.
#      - ```ad2source SOCK 192.168.1.2:10000```
#    - Set source to local attached uart with TX on GPIO 4 and RX on GPIO 36.
#      - ```ad2source COM 4:36```
ad2source = C 4:36

###############################################################################
#- Manage network connection type.
#  - ```netmode {mode} [args]```
#    - {mode}
#      - [N]one: (default) Do not enable any network let component(s) manage
#      the networking.
#      - [W]iFi: Enable WiFi network driver.
#      - [E]thernet: Enable ethernet network driver.
#    - [arg]
#      - Argument string name value pairs sepearted by &.
#        - Keys: MODE,IP,MASK,GW,DNS1,DNS2,SID,PASSWORD
#  - Examples
#    - WiFi DHCP with SID and password.
#      - ```netmode W mode=d&sid=example&password=somethingsecret```
#    - Ethernet DHCP DNS2 override.
#      - ```netmode E mode=d&dns2=4.2.2.2```
netmode = E mode=d

###############################################################################
#- Set logging mode.
#  - ```logmode {level}```
#    - {level}
#      - [I]nformational
#      - [V]Verbose
#      - [D]ebugging
#      - [N]one: (default) Warnings and errors only.
logmode = I

###############################################################################
#- Manage user codes.
#  - ```code {id} [value]```
#    - {id}
#      - Index of code to evaluate. 0 is default.
#    - [value]
#      - A valid alarm code or -1 to remove.
[code]
# Default code
0 = 4112
1 = 1234

###############################################################################
# Manage partitions.
# - ```part {id} {value} [zone list]```
#   - {id}
#     - The partition ID. 0 is the default.
#   - {value}
#     - (Ademco)Keypad address or (DSC)Partion #. -1 to delete.
#   - [zone list]
#     - Comma separated list of zone numbers associated with this partition for tracking.
# - Examples
#   - Set default address mask to 18 for an Ademco system with zones 2, 3, and 4.
#     - ```part 0 18 2,3,4```
#   - Set default send partition to 1 for a DSC system.
#     - ```part 0 1```
#   - Show address for partition 2.
#     - ```part 2```
#   - Remove partition in slot 2.
#     - ```part 2 -1```
#      - Note: address -1 will remove an entry.

###############################################################################
[part 0]
# Default partition.
address = 18
zones = 2,3,4,5,6,24,25,26

#[part 1]
## Second partition.
#address = 23
#zones = 7,27

###############################################################################
# Zone settings
#   description: json zone description document.
[zone 2]
description = {"type": "door", "alpha": "Front Door"}

[zone 3]
description = {"type": "door", "alpha": "Den Door"}

[zone 4]
description = {"type": "door", "alpha": "Back Door"}

[zone 24]
description = {"type": "carbon_monoxide", "alpha": "Test CO2 ZONE"}

[zone 26]
description = {"type": "door", "alpha": "test door"}

###############################################################################
# Virtual switch definitions [switch N]
#
# [default] Default state.
#      {arg1}: [0]CLOSE(OFF) [1]OPEN(ON)
# [reset] AUTO Reset.
#      {arg1}:  time in ms 0 to disable
# [types] Message type filter.
#      {arg1}: Message type list separated by ',' or empty to disables filter.
#             Message Types: [ALPHA,LRR,REL,EXP,RFX,AUI,KPM,KPE,CRC,VER,ERR,EVENT]
#             For EVENT type the message will be generated by the API and not the AD2
# [filter] Pre filter REGEX or empty to disable.
# [open] Open(ON) state regex search string list management.
#      {arg1}: Index # 1-8
#      {arg2}: Regex string for this slot or empty string  to clear
# [close] Close(OFF) state regex search string list management.
#      {arg1}: Index # 1-8
#      {arg2}: Regex string for this slot or empty string to clear
# [trouble] Trouble state regex search string list management.
#      {arg1}: Index # 1-8
#      {arg2}: Regex string for this slot or empty  string to clear
[switch 1]
# RFX serial 0041594
default = 0
reset = 0
types = RFX
filter = !RFX:0041594,.*
open 1 = !RFX:0041594,1.......
close 1 = !RFX:0041594,0.......
trouble 1 = !RFX:0041594,......1.

# RFX serial 0180036
[switch 2]
default = 0
reset = 0
type = RFX
filter = !RFX:0180036,.*
open 1 = !RFX:0180036,1.......
close 1 = !RFX:0180036,0.......
trouble 1 = !RFX:0180036,......1.

[switch 95]
# Fire switch
default = 0
reset = 0
type = EVENT
open 1 = FIRE ON
close 1 = FIRE OFF
trouble 1 =

###############################################################################
# MQTT client component
[mqtt]
## Enable / Disable true or false
enable = false
## Security warning: Allows remote control with no authentication.
## Only use on trusted private MQTT servers when access can be controlled.
commands = false
## Prefix all publish topics with this string.
tprefix = homeassistant
## Publish discovery topics in this url prefix.
dprefix = homeassistant
## MQTT Server URL with optinal USER:PASS
url = mqtt://user:pass@testmqtt.example.com/

## virtual switch configuration
## command: switch N subkey value
## subkey [description]
##   json string with required name, type, and value_template values.
##     name: The device alpha descriptive name.
##     type: The device type.
##     value_template: Template used for device auto discovery.
## subkey [open | close | trouble]
##   The messages output VALUE using the template {"state": "VALUE"}
switch 1 description = <<<END_OF_TEXT
{
  "name": "5800 Micra SN:0041594",
  "type": "door",
  "value_template": "{{value_json.state}}"
}
END_OF_TEXT
switch 1 open = ON
switch 1 close = OFF
switch 1 trouble = ON
switch 2 description = { "name": "5800 Micra SN:0180036", "type": "door", "value_template": "{{value_json.state}}" }
switch 2 open = ON
switch 2 close = OFF
switch 2 trouble = ON


###############################################################################
# FTP Daemon component
[ftpd]
## Enable / Disable true or false
enable = true
## Access control list
acl = 192.168.0.0/16, 10.10.0.0/16

###############################################################################
# HTML5+websocket daemon
[webui]
## Enable / Disable true or false
enable = true
## Access control list
acl = 192.168.0.0/16, 10.10.0.0/16

###############################################################################
# ser2sock daemon to share the AD2 to other devices on port 10000
[ser2sockd]
## Enable / Disable true or false
enable = true
## Access control list
acl = 192.168.0.0/16, 10.10.0.0/16

###############################################################################
# Pushover event notification client
[pushover]
## Enable / Disable true or false
enable = false
## Pushover account keys 0-9. Select account by its ID 0-9 in switch settings.
apptoken 0 = aabbccddeeffAABBCCDEEFF
userkey 0 = aabbccddeeffAABBCCDEEFF
apptoken 1 = aabbccddeeffAABBCCDEEFF
userkey 1 = aabbccddeeffAABBCCDEEFF

## enabled notification switches and PUSHOVER specific settings

## To connect a [SWITCH NNN] to notification specify the account and settings
## for each switch used. Prefix each switch with ```switch N``` where N is the switch ID.
switch 1 notify = 0
switch 1 open = SWITCH 1 OPEN
switch 1 close = SWITCH 1 CLOSE
switch 1 trouble = SWITCH 1 TROUBLE

switch 2 notify = 0
switch 2 open = SWITCH 2 OPEN
switch 2 close = SWITCH 2 CLOSE
switch 2 trouble = SWITCH 2 TROUBLE

switch 95 notify  = 0,1
switch 95 open = FIRE ON
switch 95 close  = FIRE OFF
switch 95 trouble = FIRE TROUBLE


###############################################################################
# Twilio(SMS,Call)+Sendgrid(email) notification client
#
# Sets the 'SID' for a given notification slot. Multiple slots allow for multiple twilio accounts.
#   ```twilio sid {slot} {hash}```
#     {slot}: [N]
#       For default use 0.
#     {hash}: Twilio ```Account SID```.
#   Example: ```twilio sid 0 aabbccdd112233..```
# Sets the ```Auth Token``` for a given notification slot.
#   ```twilio token {slot} {hash}```
#     {slot}: [N]
#       For default use 0.
#     {hash}: Twilio ```Auth Token```.
#      Example: ```twilio token 0 aabbccdd112233..```
# Sets the 'From' info for a given notification slot.
#   ```twilio from {slot} {phone|email}```
#     {phone|email}: [NXXXYYYZZZZ|user@example.com]
# Sets the 'To' info for a given notification slot.
#   ```twilio to {slot} {phone|email}```
#     {phone|email}: [NXXXYYYZZZZ|user@example.com, user2@example.com]
# Sets the 'Type' for a given notification slot.
#   ```twilio type {slot} {type}```
#     {type}: [M|C|E]
#       Notification type [M]essage, [C]all, [E]mail.
#   Example: ```twilio type 0 M```
# Sets the output format for a given notification slot.
#   ```twilio format {slot} {string}```
#     {string}: Format string used to generate final output from switch output args string.
#        Placeholder-based formatting syntax.
#   Example: ```twilio format 2 <Response><Say>{0}</Say><Say>{0}</Say></Response>```
[twilio]
## Enable / Disable true or false
enable = false

## Account settting_N 0-9

### Example sendgrid email
sid 0 = NA
token 0 = sendgrid.api.key..
from 0 = from@example.com
to 0 = to@example.com
type 0 = E
format 0 = {}

### Example Twilio SMS
sid 1 = aabbccdd112233..
token 1 = aabbccdd112233..
from 1 = NXXXYYYZZZZ
to 1 = NXXXYYYZZZZ
type 1 = M
format 1 = {}

### Example Twilio Call
sid 2 = aabbccdd112233..
token 2 = aabbccdd112233..
from 2 = NXXXYYYZZZZ
to 2 = NXXXYYYZZZZ
type 2 = C
format 2 = <<<END_OF_TEXT
<Response>
  <Pause length="3"/><Say>{0}</Say><Pause length="3"/>
  <Say>{0}</Say><Pause length="3"/><Say>{0}</Say></Response>
END_OF_TEXT
